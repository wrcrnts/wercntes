function buildShortReport({ status, fp, userAgent, timezone, type, ip, geoStr, uaData }) {
  let shortMsg = '';
  if (status.status === 'new') {
    shortMsg += 'üÜï –ù–û–í–´–ô –ó–ê–•–û–î\n';
  } else if (status.status === 'repeat') {
    shortMsg += '‚ôªÔ∏è –ü–û–í–¢–û–†–ù–´–ô –ó–ê–•–û–î\n';
    shortMsg += `–®–∞–Ω—Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: ${status.score}% (${status.reason})\n`;
    shortMsg += `–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç: ${formatDate(status.lastSeen, timezone)}\n`;
  } else {
    shortMsg += '‚ùì –ù–ï–ò–ó–í–ï–°–¢–ù–´–ô –ó–ê–•–û–î\n';
    if (!fp) shortMsg += '–ü—Ä–∏—á–∏–Ω–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç fingerprint\n';
    if (!userAgent) shortMsg += '–ü—Ä–∏—á–∏–Ω–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç User-Agent\n';
    if (status.lastSeen) shortMsg += `–í–æ–∑–º–æ–∂–Ω—ã–π –≤–∏–∑–∏—Ç: ${formatDate(status.lastSeen, timezone)}\n`;
  }
  shortMsg += `–¢–∏–ø: ${type}\n`;
  shortMsg += `IP: ${ip} ‚Äî ${geoStr}\n`;
  shortMsg += `–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${uaData.device || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
  shortMsg += `–ë—Ä–∞—É–∑–µ—Ä: ${uaData.browser || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}, –û–°: ${uaData.os || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
  shortMsg += `–í—Ä–µ–º—è: ${new Date().toLocaleTimeString('ru-RU', { timeZone: timezone || 'UTC' })}`;
  return shortMsg;
}

function buildDetailsReport({ geoData, userAgent, fp, webrtcIps, ip, screenSize, width, height, platform, language, timezone, clientTime, uaParsed, hardwareConcurrency, deviceMemory, touchSupport }) {
  let detailsMsg = '';
  detailsMsg += `Fingerprint: ${fp || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
  detailsMsg += `User-Agent: ${userAgent || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
  detailsMsg += `–Ø–∑—ã–∫ –±—Ä–∞—É–∑–µ—Ä–∞: ${language || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
  detailsMsg += `–í—Ä–µ–º—è –Ω–∞ –ü–ö: ${clientTime || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
  detailsMsg += `–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞: ${timezone || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
  detailsMsg += `IP: ${ip || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
  detailsMsg += `–ü—Ä–æ–≤–∞–π–¥–µ—Ä: ${geoData?.org || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
  detailsMsg += `VPN/Proxy/Tor: ${(geoData?.proxy || geoData?.hosting) ? '–î–∞' : '–ù–µ—Ç'}\n`;
  if (Array.isArray(webrtcIps) && webrtcIps.length) {
    let webrtcNote = '';
    if (ip && webrtcIps.some(wip => wip !== ip)) {
      webrtcNote = ' (–æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç –≤–Ω–µ—à–Ω–µ–≥–æ IP)';
    }
    detailsMsg += `WebRTC IPs: ${webrtcIps.join(', ')}${webrtcNote}\n`;
  } else {
    detailsMsg += 'WebRTC IPs: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n';
  }
  if (screenSize) {
    detailsMsg += `–†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞: ${screenSize}\n`;
  } else if (width && height) {
    detailsMsg += `–†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞: ${width}x${height}\n`;
  } else {
    detailsMsg += '–†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ\n';
  }
  if (platform) detailsMsg += `–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${platform}\n`;
  if (uaParsed && typeof uaParsed === 'object') {
    detailsMsg += `–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ${uaParsed.device || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
    detailsMsg += `–ë—Ä–∞—É–∑–µ—Ä: ${uaParsed.browser || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
    detailsMsg += `–û–°: ${uaParsed.os || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
  }
  if (typeof hardwareConcurrency !== 'undefined') detailsMsg += `–ü–æ—Ç–æ–∫–æ–≤ CPU: ${hardwareConcurrency}\n`;
  if (typeof deviceMemory !== 'undefined') detailsMsg += `–û–ó–£ (–ì–ë): ${deviceMemory}\n`;
  if (typeof touchSupport !== 'undefined') detailsMsg += `Touch: ${touchSupport ? '–¥–∞' : '–Ω–µ—Ç'}\n`;
  return detailsMsg;
}

function buildInlineKeyboard(visitId) {
  return [[{ text: '–î–µ—Ç–∞–ª–∏', callback_data: `details_${visitId}` }]];
}

async function sendLocationWithReport(bot, chatId, geoData, shortMsg, inlineKeyboard) {
  await bot.sendLocation(chatId, geoData.lat, geoData.lon, {
    caption: shortMsg
  });
  await bot.sendMessage(chatId, 'üëá', {
    reply_markup: { inline_keyboard: inlineKeyboard }
  });
}

async function sendShortReport(bot, chatId, shortMsg, inlineKeyboard) {
  await bot.sendMessage(chatId, shortMsg, {
    reply_markup: { inline_keyboard: inlineKeyboard }
  });
}

function formatDate(date, tz) {
  try {
    return new Date(date).toLocaleString('ru-RU', { timeZone: tz || 'UTC' });
  } catch {
    return date;
  }
}

module.exports = {
  buildShortReport,
  buildDetailsReport,
  buildInlineKeyboard,
  sendLocationWithReport,
  sendShortReport
};
