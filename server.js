
const express = require('express');
const fs = require('fs');
const path = require('path');
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');

const visitorInfo = require('./modules/visitorinfo');
const reportInfo = require('./modules/reportinfo');
const pgdb = require('./modules/pgdb');

const app = express();
app.use(express.json());
app.set('trust proxy', true);
app.use(express.static(path.join(__dirname, 'public')));


// ENV
const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const CHAT_IDS = (process.env.CHAT_IDS || '').split(',').map(id => id.trim());
const DOMAIN = process.env.DOMAIN || 'https://example.com';
const CRYPTO_PAY_TOKEN = process.env.CRYPTO_PAY_TOKEN;
// --- CryptoBot API: —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç ---
app.post('/api/create-invoice', async (req, res) => {
  const { amount, currency, description } = req.body;
  if (!CRYPTO_PAY_TOKEN) {
    return res.status(500).json({ error: 'CRYPTO_PAY_TOKEN –Ω–µ –∑–∞–¥–∞–Ω' });
  }
  try {
    const response = await axios.post(
      'https://pay.crypt.bot/api/createInvoice',
      {
        asset: currency || 'USDT',
        amount,
        description: description || '–û–ø–ª–∞—Ç–∞',
      },
      {
        headers: { 'Crypto-Pay-API-Token': CRYPTO_PAY_TOKEN }
      }
    );
    if (response.data.ok && response.data.result && response.data.result.pay_url) {
      res.json({ pay_url: response.data.result.pay_url });
    } else {
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞', details: response.data });
    }
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// TELEGRAM
const bot = new TelegramBot(TELEGRAM_TOKEN);
bot.setWebHook(`${DOMAIN}/bot${TELEGRAM_TOKEN}`);

// VISITOR DATA
const VISITORS_FILE = './visitors.json';
let visitors = {};

try {
  if (fs.existsSync(VISITORS_FILE)) {
    visitors = JSON.parse(fs.readFileSync(VISITORS_FILE));
  }
} catch (err) {
  console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è visitors.json:', err);
  visitors = {};
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  const now = new Date().toISOString();
  console.log(`[${now}] ${req.method} ${req.originalUrl} IP: ${req.headers['x-forwarded-for'] || req.connection.remoteAddress}`);
  next();
});

// ROUTES
app.post(`/bot${TELEGRAM_TOKEN}`, (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

bot.onText(/\/(\w+)/, async (msg, match) => {
  const command = match[1];
  const user = msg.from ? `${msg.from.username || msg.from.id}` : 'unknown';
  console.log(`[TELEGRAM] –ö–æ–º–∞–Ω–¥–∞: /${command} –æ—Ç ${user} (chatId: ${msg.chat.id})`);
});

bot.onText(/\/stats/, async (msg) => {
  console.log(`[TELEGRAM] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /stats –≤—ã–∑–≤–∞–Ω –æ—Ç chatId: ${msg.chat.id}`);
  try {
    const visitors = await pgdb.getAllVisitors();
    const today = new Date().toISOString().slice(0, 10);
    let total = 0, bots = 0, pc = 0, mobile = 0;
    for (const v of visitors) {
      if (!v.time || !v.uaParsed) continue;
      if (!v.time.startsWith(today)) continue;
      total++;
      if (v.type === 'ü§ñ –ë–æ—Ç') bots++;
      else if (v.uaParsed.device && v.uaParsed.device.toLowerCase().includes('–¥–µ—Å–∫—Ç–æ–ø')) pc++;
      else if (v.uaParsed.device && (v.uaParsed.device.toLowerCase().includes('android') || v.uaParsed.device.toLowerCase().includes('iphone') || v.uaParsed.device.toLowerCase().includes('mobile'))) mobile++;
    }
    let msgText = `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n`;
    msgText += `–í—Å–µ–≥–æ –∑–∞—Ö–æ–¥–æ–≤: ${total}, –∏–∑ –Ω–∏—Ö –±–æ—Ç—ã: ${bots}\n`;
    msgText += `–ü–ö: ${pc}, —Ç–µ–ª–µ—Ñ–æ–Ω—ã: ${mobile}\n`;
    msgText += `\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å APGRHOST!`;
    bot.sendMessage(msg.chat.id, msgText);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ PostgreSQL /stats:', err);
    bot.sendMessage(msg.chat.id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
  }
});

app.get('/ping-bot', (req, res) => {
  const now = new Date().toISOString();
  const ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress || '';
  console.log(`[PING] ${now} - –ü–∏–Ω–≥ –æ—Ç IP: ${ip}`);
  res.send('OK');
});

app.post('/collect', async (req, res) => {
  const { fingerprint: fp, userAgent, timezone, clientTime } = req.body || {};
  const rawIp = req.headers['x-forwarded-for'] || req.connection.remoteAddress || '';
  const ip = visitorInfo.extractIPv4(rawIp);

  if (!fp && !ip) {
    console.warn(`[DEBUG] –ù–µ—Ç fingerprint –∏ IP –≤ –∑–∞–ø—Ä–æ—Å–µ /collect:`, req.body);
    return res.status(400).json({ ok: false, error: '–ù–µ—Ç fingerprint –∏ IP' });
  }

  if (visitorInfo.isGoogleIP(ip)) {
    return res.status(200).json({ ok: true, skip: 'GoogleBot IP' });
  }

  const isBot = detectBot(userAgent);
  const type = isBot ? 'ü§ñ –ë–æ—Ç' : 'üë§ –ß–µ–ª–æ–≤–µ–∫';

  // –ü–∞—Ä—Å–∏–Ω–≥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  const uaData = visitorInfo.parseDevice(userAgent || '');
  if (!uaData.device) uaData.device = '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  if (!uaData.browser) uaData.browser = '';
  if (!uaData.os) uaData.os = '';

  const geoData = await visitorInfo.getGeo(ip);
  const geoNote = geoData.cached ? '‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ IP –≤–∑—è—Ç—ã –∏–∑ –∫—ç—à–∞' : '';
  const geoStr = geoData.location || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

  // --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–∑–∏—Ç–∞ —á–µ—Ä–µ–∑ PostgreSQL ---
  let status = { status: 'new', reason: '–ù–æ–≤—ã–π fingerprint –∏–ª–∏ IP' };
  try {
    let prevVisit = null;
    if (fp) prevVisit = await pgdb.getVisitor(fp);
    if (!prevVisit && ip) prevVisit = await pgdb.getVisitor(`ip_${ip}`);
    if (prevVisit) {
      status = {
        status: 'repeat',
        score: 100,
        reason: prevVisit.fingerprint === fp ? 'Fingerprint —Å–æ–≤–ø–∞–ª' : 'IP —Å–æ–≤–ø–∞–ª',
        lastSeen: prevVisit.time
      };
    }
  } catch (err) {
    console.error('[PostgreSQL] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤–∏–∑–∏—Ç–∞:', err);
  }
  const visitId = fp || `ip_${ip}`;

  // --- –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ---
  let shortMsg = reportInfo.buildShortReport({
    status,
    fp,
    userAgent,
    timezone,
    type,
    ip,
    geoStr,
    uaData
  });

  // --- –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –≤—Ç–æ—Ä–æ–π –∫–Ω–æ–ø–∫–∏ ---
  let webrtcIps = [];
  try {
    const webrtcLog = fs.readFileSync('webrtc_ips.log', 'utf8').split('\n').reverse();
    for (const line of webrtcLog) {
      if (!line) continue;
      const entry = JSON.parse(line);
      if (entry && entry.ips && Array.isArray(entry.ips)) {
        webrtcIps = entry.ips;
        break;
      }
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è webrtc_ips.log:', err);
  }

  let detailsMsg = reportInfo.buildDetailsReport({
    geoData,
    userAgent,
    fp,
    webrtcIps,
    ip,
    screenSize: req.body.screenSize,
    width: req.body.width,
    height: req.body.height,
    platform: req.body.platform,
    language: req.body.language,
    timezone: req.body.timezone,
    clientTime: req.body.clientTime,
    uaParsed: uaData,
    hardwareConcurrency: req.body.hardwareConcurrency,
    deviceMemory: req.body.deviceMemory,
    touchSupport: req.body.touchSupport
  });

  const inlineKeyboard = reportInfo.buildInlineKeyboard(visitId);

  for (const chatId of CHAT_IDS) {
    try {
      if (geoData.lat && geoData.lon && ip && ip !== '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') {
        await reportInfo.sendLocationWithReport(bot, chatId, geoData, shortMsg, inlineKeyboard);
      } else {
        await reportInfo.sendShortReport(bot, chatId, shortMsg, inlineKeyboard);
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ Telegram:', err);
    }
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–∑–∏—Ç –≤ PostgreSQL
  try {
    await pgdb.saveVisitor(visitId, {
      fingerprint: fp,
      ip,
      time: new Date().toISOString(),
      userAgent,
      geo: geoStr,
      uaParsed: uaData,
      detailsMsg,
      visitId,
      type // <--- —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø (–±–æ—Ç/—á–µ–ª–æ–≤–µ–∫)
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–∑–∏—Ç–∞ –≤ PostgreSQL:', err);
  }

  res.json({ ok: true });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ"
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const data = query.data;
  console.log(`[TELEGRAM] Callback: ${data} –æ—Ç chatId: ${chatId}`);
  if (data && data.startsWith('details_')) {
    console.log(`[TELEGRAM] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ details_ –≤—ã–∑–≤–∞–Ω –¥–ª—è visitId: ${data.replace('details_', '')}, chatId: ${chatId}`);
    const visitId = data.replace('details_', '');
    try {
      const visit = await pgdb.getVisitor(visitId);
      if (visit && visit.detailsMsg) {
        await bot.sendMessage(chatId, visit.detailsMsg, { reply_to_message_id: query.message.message_id });
      } else {
        console.warn(`[DEBUG] –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è visitId: ${visitId}, chatId: ${chatId}`);
        await bot.sendMessage(chatId, '–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤–∏–∑–∏—Ç –±—ã–ª –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.', { reply_to_message_id: query.message.message_id });
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ PostgreSQL details:', err, 'visitId:', visitId, 'chatId:', chatId);
      await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –≤–∏–∑–∏—Ç–∞.', { reply_to_message_id: query.message.message_id });
    }
  } else {
    console.warn(`[DEBUG] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback data: ${data} –æ—Ç chatId: ${chatId}`);
  }
});

// –ü—Ä–∏—ë–º WebRTC IP-–∞–¥—Ä–µ—Å–æ–≤ —Å –∫–ª–∏–µ–Ω—Ç–∞
app.post('/collect-webrtc', (req, res) => {
  const { webrtcIps } = req.body || {};
  if (!Array.isArray(webrtcIps) || webrtcIps.length === 0) {
    return res.status(400).json({ ok: false, error: '–ù–µ—Ç WebRTC IP' });
  }
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–º–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–¥ –≤–∞—à–∏ –Ω—É–∂–¥—ã)
  try {
    fs.appendFileSync('webrtc_ips.log', JSON.stringify({ time: new Date().toISOString(), ips: webrtcIps }) + '\n');
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ webrtc_ips.log:', err);
  }
  res.json({ ok: true });
});

// HELPER
function detectBot(ua) {
  if (!ua) return true;
  return /bot|crawl|spider|google|yandex|baidu|bing|duckduck/i.test(ua);
}

function formatDate(date, tz) {
  try {
    return new Date(date).toLocaleString('ru-RU', { timeZone: tz || 'UTC' });
  } catch {
    return date;
  }
}

// –°—Ç—Ä–∞–Ω–∏—Ü—ã
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.get('/pricelist/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'pricelist', 'index.html'));
});

// START
const PORT = process.env.PORT || 10000;
app.listen(PORT, () => {
  console.log(`üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
